# Copyright 2022 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This is the main configuration file for the application.
# ~~~~~

appName = ated

include "backend.conf"

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.play.bootstrap.http.RequestHandler"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.audit.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.audit.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform backend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.backend.BackendModule"

play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"

play.modules.enabled += "module.ServiceBindings"

application.session.httpOnly = false

application.session.secure = false


play.i18n.langs = ["en"]

play.http.router = prod.Routes

schedules.delete-property-details-job {
	cleardown.batchSize = 1
	enabled          = false
	description     = "delete property drafts job"
	expression      = "0_*_*_?_*_*"  # run every 60 seconds between the hours of 0-23
	lockTimeout     = 600
}

schedules.delete-reliefs-job {
	cleardown.batchSize = 1
	enabled          = false
	description     = "delete reliefs job"
	expression      = "0_*_*_?_*_*"  # run every 60 seconds between the hours of 0-23
	lockTimeout     = 600
}

schedules.delete-liability-returns-job {
	cleardown.batchSize = 1
	enabled          = false
	description     = "delete liability returns job"
	expression      = "0_*_*_?_*_*"  # run every 60 seconds between the hours of 0-23
	lockTimeout     = 600
}

controllers {
  com.kenshoo.play.metrics.MetricsController = {
    needsAuth = false
    needsLogging = false
    needsAuditing = false
  }
  controllers.DetailsController = {
    needsAuth = true
    needsLogging = true
    needsAuditing = false
    authParams {
      delegatedAuthRule = "ated-auth"
      confidenceLevel = 50
    }
  }

  controllers.AgentDetailsController = {
    needsAuth = true
    needsLogging = true
    needsAuditing = false
    authParams = {
      account = "agent"
      agentRole = "assistant"
      confidenceLevel = 50
    }
  }

  controllers.ReliefsController = {
    needsAuth = true
    needsLogging = true
    needsAuditing = false
    authParams {
      delegatedAuthRule = "ated-auth"
      confidenceLevel = 50
    }
  }

  controllers.PropertyDetailsController = {
    needsAuth = true
    needsLogging = true
    needsAuditing = false
    authParams {
      delegatedAuthRule = "ated-auth"
      confidenceLevel = 50
    }
  }

  controllers.PropertyDetailsValuesController = {
    needsAuth = true
    needsLogging = true
    needsAuditing = false
    authParams {
      delegatedAuthRule = "ated-auth"
      confidenceLevel = 50
    }
  }

  controllers.PropertyDetailsPeriodController = {
    needsAuth = true
    needsLogging = true
    needsAuditing = false
    authParams {
      delegatedAuthRule = "ated-auth"
      confidenceLevel = 50
    }
  }

  controllers.ReturnsSummaryController = {
    needsAuth = true
    needsLogging = true
    needsAuditing = false
    authParams {
      delegatedAuthRule = "ated-auth"
      confidenceLevel = 50
    }
  }

  controllers.SubscriptionDataController = {
    needsAuth = true
    needsLogging = true
    needsAuditing = false
    authParams {
      delegatedAuthRule = "ated-auth"
      confidenceLevel = 50
    }
  }

  controllers.AgentRetrieveClientSubscriptionDataController = {
    needsAuth = true
    needsLogging = true
    needsAuditing = false
    authParams = {
      account = "agent"
      agentRole = "assistant"
      confidenceLevel = 50
    }
  }

  controllers.FormBundleReturnsController = {
    needsAuth = true
    needsLogging = true
    needsAuditing = false
    authParams {
      delegatedAuthRule = "ated-auth"
      confidenceLevel = 50
    }
  }

  controllers.ChangeLiabilityReturnController = {
    needsAuth = true
    needsLogging = true
    needsAuditing = false
    authParams {
      delegatedAuthRule = "ated-auth"
      confidenceLevel = 50
    }
  }

  controllers.DisposeLiabilityReturnController = {
    needsAuth = true
    needsLogging = true
    needsAuditing = false
    authParams {
      delegatedAuthRule = "ated-auth"
      confidenceLevel = 50
    }
  }


  controllers.AgentClientRelationshipControllerForClient = {
    needsAuth = true
    needsLogging = true
    needsAuditing = false
    authParams {
      confidenceLevel = 50
    }
  }

  controllers.AgentClientRelationshipControllerForAgent = {
    needsAuth = true
    needsLogging = true
    needsAuditing = false
    authParams = {
      account = "agent"
      agentRole = "assistant"
      confidenceLevel = 50
    }
  }

}

# Metrics plugin settings - graphite reporting is configured on a per env basis
metrics {
  name = ${appName}
  rateUnit = SECONDS
  durationUnit = SECONDS
  showSamples = true
  jvm = true
  enabled = true # disabled for local dev, should be enabled otherwise
}


# Microservice specific config

txmonitoring {
  enabled = true
  traceRequests = true
}

auditing {
  enabled = true
  traceRequests = true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}

mongodb {
  uri = "mongodb://localhost:27017/ated"
  channels = 5
  agentClientRelationship.cache.expire.seconds = 3600
  reliefs.cache.expire.seconds = 86400
  propertyDetails.cache.expire.seconds = 86400
  disposeLiabilityReturn.cache.expire.seconds = 86400
  failoverStrategy = {
    initialDelayMsecs = 100
    retries = 10
    delay = {
      function = fibonacci
      factor = 1
    }
  }
}

microservice {
  metrics {
    graphite {
      host = graphite
      port = 2003
      prefix = play.${appName}.
      enabled = true # disabled for local dev, should be enabled otherwise
    }
  }

  services {
    timeout = 5 seconds

    delay-response = 2 seconds

    protocol = http

    auth {
      host = localhost
      port = 8500
    }

    email {
      host = localhost
      port = 8300
    }

    datastream {
      host = localhost
      port = 8100
    }

    etmp-hod {
      host = "127.0.0.1"
      port = 9918
    }
    government-gateway-admin {
      host = localhost
      port = 9936
    }
  }
}

json.encryption {
  key="fqpLDZ4smuDsekHkeEBlCA=="
  previousKeys=[]
}
